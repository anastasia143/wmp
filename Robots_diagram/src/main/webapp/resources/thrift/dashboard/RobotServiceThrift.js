//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

RobotServiceThrift_registerRobot_args = function(args) {
  this.robotName = null;
  this.ssid = null;
  if (args) {
    if (args.robotName !== undefined) {
      this.robotName = args.robotName;
    }
    if (args.ssid !== undefined) {
      this.ssid = args.ssid;
    }
  }
};
RobotServiceThrift_registerRobot_args.prototype = {};
RobotServiceThrift_registerRobot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.robotName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RobotServiceThrift_registerRobot_args.prototype.write = function(output) {
  output.writeStructBegin('RobotServiceThrift_registerRobot_args');
  if (this.robotName !== null && this.robotName !== undefined) {
    output.writeFieldBegin('robotName', Thrift.Type.STRING, 1);
    output.writeString(this.robotName);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RobotServiceThrift_registerRobot_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
RobotServiceThrift_registerRobot_result.prototype = {};
RobotServiceThrift_registerRobot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RobotServiceThrift_registerRobot_result.prototype.write = function(output) {
  output.writeStructBegin('RobotServiceThrift_registerRobot_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RobotServiceThrift_deleteRobot_args = function(args) {
  this.robotName = null;
  if (args) {
    if (args.robotName !== undefined) {
      this.robotName = args.robotName;
    }
  }
};
RobotServiceThrift_deleteRobot_args.prototype = {};
RobotServiceThrift_deleteRobot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.robotName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RobotServiceThrift_deleteRobot_args.prototype.write = function(output) {
  output.writeStructBegin('RobotServiceThrift_deleteRobot_args');
  if (this.robotName !== null && this.robotName !== undefined) {
    output.writeFieldBegin('robotName', Thrift.Type.STRING, 1);
    output.writeString(this.robotName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RobotServiceThrift_deleteRobot_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
RobotServiceThrift_deleteRobot_result.prototype = {};
RobotServiceThrift_deleteRobot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RobotServiceThrift_deleteRobot_result.prototype.write = function(output) {
  output.writeStructBegin('RobotServiceThrift_deleteRobot_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RobotServiceThrift_sendProgram_args = function(args) {
  this.robotName = null;
  this.program = null;
  if (args) {
    if (args.robotName !== undefined) {
      this.robotName = args.robotName;
    }
    if (args.program !== undefined) {
      this.program = args.program;
    }
  }
};
RobotServiceThrift_sendProgram_args.prototype = {};
RobotServiceThrift_sendProgram_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.robotName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.program = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RobotServiceThrift_sendProgram_args.prototype.write = function(output) {
  output.writeStructBegin('RobotServiceThrift_sendProgram_args');
  if (this.robotName !== null && this.robotName !== undefined) {
    output.writeFieldBegin('robotName', Thrift.Type.STRING, 1);
    output.writeString(this.robotName);
    output.writeFieldEnd();
  }
  if (this.program !== null && this.program !== undefined) {
    output.writeFieldBegin('program', Thrift.Type.STRING, 2);
    output.writeString(this.program);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RobotServiceThrift_sendProgram_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
RobotServiceThrift_sendProgram_result.prototype = {};
RobotServiceThrift_sendProgram_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RobotServiceThrift_sendProgram_result.prototype.write = function(output) {
  output.writeStructBegin('RobotServiceThrift_sendProgram_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RobotServiceThriftClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
RobotServiceThriftClient.prototype = {};
RobotServiceThriftClient.prototype.registerRobot = function(robotName, ssid) {
  this.send_registerRobot(robotName, ssid);
  return this.recv_registerRobot();
};

RobotServiceThriftClient.prototype.send_registerRobot = function(robotName, ssid) {
  this.output.writeMessageBegin('registerRobot', Thrift.MessageType.CALL, this.seqid);
  var args = new RobotServiceThrift_registerRobot_args();
  args.robotName = robotName;
  args.ssid = ssid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

RobotServiceThriftClient.prototype.recv_registerRobot = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new RobotServiceThrift_registerRobot_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'registerRobot failed: unknown result';
};
RobotServiceThriftClient.prototype.deleteRobot = function(robotName) {
  this.send_deleteRobot(robotName);
  return this.recv_deleteRobot();
};

RobotServiceThriftClient.prototype.send_deleteRobot = function(robotName) {
  this.output.writeMessageBegin('deleteRobot', Thrift.MessageType.CALL, this.seqid);
  var args = new RobotServiceThrift_deleteRobot_args();
  args.robotName = robotName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

RobotServiceThriftClient.prototype.recv_deleteRobot = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new RobotServiceThrift_deleteRobot_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteRobot failed: unknown result';
};
RobotServiceThriftClient.prototype.sendProgram = function(robotName, program) {
  this.send_sendProgram(robotName, program);
  return this.recv_sendProgram();
};

RobotServiceThriftClient.prototype.send_sendProgram = function(robotName, program) {
  this.output.writeMessageBegin('sendProgram', Thrift.MessageType.CALL, this.seqid);
  var args = new RobotServiceThrift_sendProgram_args();
  args.robotName = robotName;
  args.program = program;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

RobotServiceThriftClient.prototype.recv_sendProgram = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new RobotServiceThrift_sendProgram_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'sendProgram failed: unknown result';
};
